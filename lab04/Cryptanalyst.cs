using System;
using System.Collections.Generic;
using System.Text;

namespace lab04
{
    abstract class Cryptanalyst
    {
        /* Чем оперируют кодер и декодер
         * Атрибуты:
         *  SEED = порождающее значение
         *  Гамма шифра =  псевдослучайная последовательность, полученная по алгоритму
         *  Открытые данные в символьном виде = строка символов
         *  Открытые данные в двоичном виде = конвертировать строку символов в двоичный вид
         *  Зашифрованные данные = данные(двоичн.вид) (XOR) гамма шифра
         * Поведение:
         *  Алгоритм генерации гаммы шифра = генерирует посл-ть на основе порожд. знач.
         */
         
        /* Атрибуты */
        int seed; // порождающее значение | public
        String sequence; // последователньость символов
        /* гамма шифра в каком-то двоичном виде | private */
        /* открытые данные в символьном виде | private */
        /* открытые данные в каком-то двоичном виде  | private*/

        /* Свойства */
        public int Seed { get => seed; set => seed = value; }
        public string Sequence { get => sequence; set => sequence = value; }


        /// <summary>
        /// Переводит заданную строку в двоичную последовательность
        /// </summary>
        protected void GenerateByteSequence()
        {
            /* Перед шифрованием открытые данные разбивают на блоки одина-ковой длины, 
             * обычно по 64 бита. */
        }
        
        /// <summary>
        /// Генерирует гамму шифра на основе заданного порождающего значения
        /// </summary>
        protected void GenerateCipher()
        {
            /* Гамма шифра вырабатывается по ал-горитму генерации 
             * в виде последовательности блоков аналогичной длины.
             */
        }

    }
}
