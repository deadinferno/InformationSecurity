using System;
using System.Collections.Generic;
using System.Text;

namespace lab04
{
    class Encrypter : Cryptanalyst
    {
        /* Чем оперирует кодер
         * Атрибуты:
         *  SEED = порождающее значение | int, public
         *  Открытые данные в символьном виде = строка символов | String, public
         *  
         *  [ГШ] Гамма шифра =  псевдослучайная последовательность, полученная по алгоритму | private
         *  [До] Открытые данные в двоичном виде = конвертировать строку символов в двоичный вид | private
         *  [Дш] Зашифрованные данные = данные(двоичн.вид) (XOR) гамма шифра | private
         *  
         *  
         * Поведение:
         *  Переводит строку символов в двоичную последовательность: [До]
         *  Генерирует гамму шифра: [ГШ]
         *  Генерирует последовательность шифрованных данных: [Дш]
         *  
         * 
         */

        /// <summary>
        /// Шифрует заданный текст в соответствии с порождающим значением
        /// </summary>
        /// <param name="sequence">Шифруемый текст</param>
        /// <param name="seed">Порождающее значение</param>
        public Encrypter(String sequence, int seed)
        {
            /*
             * Инициализировать
             * Привести строку символов к двоичному виду
             * Сгенерировать гамму шифра на основе <seed>
             * Сгенерировать шифрованные данные
             */
            
            /* Инициализация */
            Sequence = sequence;
            Seed = seed;

            GenerateByteSequence(); // Приведение строки символов к двоичному виду
            GenerateCipher(); // Генерация гаммы шифра
            GenerateEncryptedData(); // Генерация последовательности шифрованных данных

        }


        /// <summary>
        /// Генерирует последовательность шифрованных данных
        /// </summary>
        private void GenerateEncryptedData()
        {
            /* Генерирует последовательность шифрованных данных применяя поблочно к гамме шифра другую 
             * двоичную последовательность (шифруемые данные, приведенные в двоичный вид) 
             * с использованием обратимой операции сложения по модулю 2 (побитовый XOR) */



        }


        /// <summary>
        /// Возвращает последовательность шифрованных данных
        /// </summary>
        public void GetEncryptedSequence()
        {
            /* Возвращает последовательность данных в двоичном виде */

            // return что-то там
        }

    }
}
