using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab03
{  
    class Program
    {
        static void Main(string[] args)
        {

            string dictionary = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя .,-!?";

            string str = 
                "эта книга адресована всем, кто изучает русский язык. но состоит она не из правил, " +
                "упражнений и учебных текстов. для этого созданы другие замечательные учебники. у этой книги " +
                "совсем иная задача. она поможет вам научиться не только разговаривать, но и размышлять по-русски. " +
                "книга, которую вы держите в руках, составлена из афоризмов и размышлений великих мыслителей, писателей, " +
                "поэтов, философов и общественных деятелей различных эпох. их мысли о тех вопросах, которые не перестают " +
                "волновать человечество. вы можете соглашаться или не соглашаться с тем, что прочитаете в этой книге. " +
                "возможно, вам покажется, что какие - то мысли уже устарели. но вы должны обязательно подумать и обосновать, " +
                "почему вы так считаете. а еще вы узнаете и почувствуете, как прекрасно звучат слова любви, сострадания, " +
                "мудрости и доброты на русском языке.";
                        
            List<Letter> probability_table = new List<Letter>() {
                new Letter(' ', 0.175), new Letter('к', 0.028), new Letter('ч', 0.012),
                new Letter('о', 0.090), new Letter('м', 0.026), new Letter('й', 0.010),
                new Letter('е', 0.072), new Letter('д', 0.025), new Letter('х', 0.009),
                new Letter('ё', 0.072), new Letter('п', 0.023), new Letter('ж', 0.007),
                new Letter('а', 0.062), new Letter('у', 0.021), new Letter('ю', 0.006),
                new Letter('и', 0.062), new Letter('я', 0.018), new Letter('ш', 0.006),
                new Letter('н', 0.053), new Letter('ы', 0.016), new Letter('ц', 0.004),
                new Letter('т', 0.053), new Letter('з', 0.016), new Letter('щ', 0.003),
                new Letter('с', 0.045), new Letter('ь', 0.014), new Letter('э', 0.003),
                new Letter('р', 0.040), new Letter('ъ', 0.014), new Letter('ф', 0.002),
                new Letter('в', 0.038), new Letter('б', 0.014),
                new Letter('л', 0.035), new Letter('г', 0.013),
            };


            Encrypter encrp = new Encrypter(new Key(5, 3), dictionary);
            string encrStr = encrp.EncryptWord(str);
            string decrStr = encrp.DecryptWord(encrStr);
            Console.WriteLine("Входное сообщение:\n" + str);
            Console.WriteLine("\nЗашифрованное сообщение:\n" + encrStr);
            Console.WriteLine("\nДешифрованное сообщение:\n" + decrStr + "\n\n\n");


            Cryptanalyst crypt = new Cryptanalyst(encrStr, new Key(7, 3), dictionary, probability_table);
            Console.ReadKey();
        }
    }    
}

/*
 * предполагаем, что весь алгоритм шифрования, кроме значения секретного ключа, известен криптоаналитику
 * криптоаналитик имеет в своем распоряжении шифртексты сообщений.
 * 
 * метод полного перебора всех возможных ключей с проверкой, является ли осмысленным получающийся открытый текст. 
 * 
 * Определить сомножитель А
 * 
 */

/*

   Независимо от заданного метода шифрования (простой или сложной замены) для криптоанализа может быть использован следу-ющий универсальный подход, 
   позволяющий определить осмысленность текста, получаемого при переборе вариантов ключа: 
    1. Выбираем предполагаемый ключ и расшифровываем с его помощью шифртекст.
    2. Подсчитываем в расшифрованном тексте количество каждой из букв алфавита («А», «Б», … «Я») или каждой биграммы («АА», «АБ», … «ЯЯ»).
    3. Определяем вероятность появления каждой буквы (биграммы) в расшифрованном тексте путем деления числа вхождений конкретной буквы на общее число букв в тексте: PA=NA/N; PБ=NБ/N; … PЯ=NЯ/N.
    Для биграмм можно определять вероятность появления от 50 до 200 самых часто встречающихся биграмм (общее число биграмм 561).
    4. Вычисляем степень расхождения статистики полученного тек-ста от статистики естественного языка по формуле
    W = (PA - PАт)2 +(PБ - PБт)2 +(PВ - PВт)2 +… + (PЯ - PЯт)2 ,
    где PАт, PБт, PВт – вероятности букв (А, Б, В и т.д.) в русских (англий-ских) текстах (табл. 1,2) или вероятности биграмм (табл. 3, 4).
    5. Повторяем шаги 1-4 для всех вариантов ключей и выбираем тот вариант ключа, при котором получилось наименьшее из значений W. Найденный 
    вариант ближе всего находится к тексту, написанному на естественном языке, поэтому с большой степенью вероятности можно рекомендовать 
    именно его ключ, как результат криптоанализа.


    */
